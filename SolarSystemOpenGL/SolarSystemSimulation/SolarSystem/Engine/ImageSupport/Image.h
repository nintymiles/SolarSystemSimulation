#pragma once
//#include "../constant.h"
#include "../GLutils.h"
#include <time.h>
namespace namespaceimage {
#define MAX_IMAGE_FILE_LENGTH 500

class ImageMemData
{
public:
	//! Represent extension of the file.
	ImageTypeEnum	extension;

	//! Width of the image in pixels. 
	int				width;

	//! Height of the image in pixels. 
	int				height;

	//! Raws bits generated by the Image parsers .
	unsigned char*	bitsraw;

	// Time Stamp for image life.
	clock_t		 timeStamp;

	// Time Stamp for image life.
	bool		 dontCareTimeStamp;

	//! File Name
	char fileName[MAX_IMAGE_FILE_LENGTH];

	unsigned int texID;
};

//Parminder: This is the base class of the all image formats
class Image
{
public:
	Image (void);
	virtual ~Image(void);

	//! Load the image data sturucture by reading image specification.
	/**
		See if image is supportted by available parser if not return boolean false 
		else fill the data structure and return boolean true.
	*/
	virtual bool loadImage(char* fileName, bool generateTexID = true, GLenum target = GL_TEXTURE_2D){ return false;}
    
	//! Release the image after use otherwise it could cause memory leak.
	bool releaseImage();

	//! Return the raw buffer 
	unsigned char* bits();

	//! Return the image height
	int imageHeight();

	//! Return the image width
	int imageWidth();

	//! Return the image extension
	ImageTypeEnum imageExtension();

	//! Set the extension of the image file name
	bool setExtension(ImageTypeEnum);

	//! Set the File Name
	bool setFileName(char* fileName);

	//! Get the File Name
	const char* fileName();

	//! Set the Texture ID
	bool setTextureID(unsigned int id);

	//! Get the Texture ID
	unsigned int& getTextureID();

	//! Set the TimeStamp
	bool setTimeStamp(clock_t time);

	//! Get the TimeStamp
	clock_t getTimeStamp();
protected:
	ImageMemData memData;

};

}
